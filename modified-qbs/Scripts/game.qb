
#00000  load_icon_properties = STRUCT{
          x = 50.0
          y = 50.0
          anim_delay = 16
          images = ARRAY(

            "images/panelsprites/wheel_001.png" "images/panelsprites/wheel_002.png" "images/panelsprites/wheel_003.png" "images/panelsprites/wheel_004.png" "images/panelsprites/wheel_005.png" "images/panelsprites/wheel_006.png"
          )
          }

#00000  game_menu_properties = STRUCT{
          x = 150.0
          y = 90.0
          w = 320.0
          h = 336.0
          just_center_x just_center_y }

#00000  EnteringStatsMenuFromGameFlow = 0

#00000  FUNCTION PauseMusicAndStreams
#00000    PauseMusic 1
#00000    PauseStream 1
#00000  END FUNCTION

#00000  FUNCTION UnPauseMusicAndStreams
#00000    PauseMusic 0
#00000    PauseStream 0
#00000  END FUNCTION

#00000  FUNCTION do_backend_retry
#00000    SpawnScript do_screen_freeze
#00000  END FUNCTION

#00000  FUNCTION do_screen_freeze
#00000    PauseGame
#00000    IF InNetGame
#00000      StartNetworkLobby
#00000    END IF
#00000    Wait 2 gameframe
#00000    DisplayLoadingScreen CurrentScreen
#00000    unpausegame
#00000    retry
#00000  END FUNCTION

#00000  FUNCTION do_backend_end_run
#00000    IF InSplitScreenGame
#00000      UseBothPadsInFrontEnd
#00000    END IF
#00000    EndRun
#00000  END FUNCTION

#00000  FUNCTION Paused_menu_backevent
#00000    IF CareerLevelIs LevelNum_Tutorials
#00000      PauseStream 0
#00000    ELSE
#00000      UnPauseMusicAndStreams
#00000    END IF
#00000  END FUNCTION

#00000  FUNCTION do_backend_continue
#00000    IF CareerLevelIs LevelNum_Tutorials
#00000      PauseStream 0
#00000    ELSE
#00000      UnPauseMusicAndStreams
#00000    END IF
#00000  END FUNCTION

#00000  FUNCTION do_backend_continue_delay
#00000    Wait 0.2 seconds
#00000  END FUNCTION

#00000  FUNCTION View_Goal_movies
#00000    printf "viewing movies -----------------------"
#00000    SpawnSkaterScript StartRunScript params = STRUCT{
            from_menu }

#00000  END FUNCTION

#00000  FUNCTION View_ListAllGoals
#00000    SpawnSkaterScript MidLevel_GoalCheck params = STRUCT{
            from_pause_menu }

#00000  END FUNCTION

#00000  FUNCTION ResetLevelGoals
#00000    UnSetGoal goal = GOAL_HIGHSCORE

#00000    UnSetGoal goal = GOAL_PROSCORE

#00000    UnSetGoal goal = GOAL_SICKSCORE

#00000    UnSetGoal goal = GOAL_SKATE

#00000    UnSetGoal goal = GOAL_TRICKSPOT

#00000    UnSetGoal goal = GOAL_TAPE

#00000    UnSetGoal goal = GOAL_SCRIPTED1

#00000    UnSetGoal goal = GOAL_SCRIPTED2

#00000    UnSetGoal goal = GOAL_SCRIPTED3

#00000    UnSetFlag flag = GOAL_STAT_POINT1

#00000    UnSetFlag flag = GOAL_STAT_POINT2

#00000    UnSetFlag flag = GOAL_STAT_POINT3

#00000    UnSetFlag flag = GOAL_STAT_POINT4

#00000    UnSetFlag flag = GOAL_STAT_POINT5

#00000    UnSetFlag flag = GOAL_STAT_POINTS

#00000    UnSetFlag flag = GOAL_DECK

#00000    LaunchLocalMessage "Goals reset"
#00000    IF CareerLevelIs LevelNum_Canada
#00000      UnSetFlag flag = LEVEL_FLAG_AJC_CAN_LOG_LOADER_SEQUENCE_PLAYED_ALREADY

#00000      UnSetFlag flag = LEVEL_FLAG_AJC_CAN_LOG_LOADER_IS_UP

#00000      SetFlag flag = LEVEL_FLAG_AJC_CAN_LOG_LOADER_IS_DOWN

#00000    END IF
#00000    IF CareerLevelIs LevelNum_Ship
#00000      UnSetFlag flag = BDJ_SHP_POOL

#00000      UnSetFlag flag = BDJ_SHP_FERRY

#00000      UnSetFlag flag = BDJ_SHP_NETS

#00000      BDJ_SHP_RestartSetup
#00000    END IF
#00000  END FUNCTION

#00000  FUNCTION do_end_comp
#00000    EndCompetition
#00000  END FUNCTION

#00000  FUNCTION test_fragmentation
#00000    LOOP
#00000      Wait 0.05 second
#00000      printf "Launching Message"
#00000      LaunchLocalMessage id = BottomInfo
            "Press X to Continue" panel_message_XtoContinue
#00000    END LOOP
#00000  END FUNCTION

#00000  FUNCTION RefreshGameMenu_Replay
#00000    PauseMusicAndStreams
#00000    AddLine parent = game_menu
          id = backend_continue
          text = "Continue"
          target = "do_backend_continue"
          kill_menu
#00000    AddLine parent = end_run_menu
          id = backend_watchreplay
          text = "Restart Replay"
          target = "WatchEndOfRunReplay"
          kill_menu
#00000    IF ReplayModeEquals REPLAY_MODE_PLAY_AFTER_RUN
#00000      AddLine parent = game_menu
            id = backend_retry
            text = "Retry"
            target = "do_backend_retry"
            kill_menu
#00000      AddLine parent = game_menu
            id = save_replay_from_pause
            text = "Save Replay"
            link = "_EndRunSaveReplay"

#00000      AddLine parent = game_menu
            id = exit_replay_from_pause
            text = "Exit"
            link = "ExitReplayAfterEndOfRun"

#00000    ELSE
#00000      AddLine parent = game_menu
            id = exit_replay_from_pause
            text = "Exit"
            link = "ExitSavedReplay"

#00000    END IF
#00000  END FUNCTION

#00000  FUNCTION RefreshGameMenu
#00000    printf "refreshing"
#00000    helper_select_choose_back_centered
#00000    IF InNetGame
#00000    ELSE
#00000      PauseMusicAndStreams
#00000    END IF
#00000    AddLine parent = game_menu
          id = backend_continue
          text = "Continue"
          target = "do_backend_continue"
          kill_menu
#00000    AddLine parent = game_menu
          id = backend_retry
          text = "Retry"
          target = "do_backend_retry"
          kill_menu
#00000    IF InSplitScreenGame
#00000      DestroyElement id = goto_trickset_menu

#00000    ELSE
#00000      AddLine parent = game_menu
            id = goto_trickset_menu
            text = "Edit Tricks"
            link = trick_menu_container

#00000    END IF
#00000    IF IsCareerMode
#00000      IF IsCompetition
#00000        DestroyElement id = backend_resetgoals

#00000        DestroyElement id = ListAllGoals

#00000      ELSE
#00000        AddLine parent = game_menu
              id = ListAllGoals
              text = "View Goals List"
              target = "View_ListAllGoals"
              kill_menu
#00000        IF CD
#00000          DestroyElement id = backend_resetgoals

#00000        ELSE
#00000          AddLine parent = game_menu
                id = backend_resetgoals
                text = "Reset Level Goals"
                target = "ResetLevelGoals"
                kill_menu
#00000        END IF
#00000      END IF
#00000    ELSE
#00000      DestroyElement id = backend_resetgoals

#00000      DestroyElement id = ListAllGoals

#00000    END IF
#00000    AddLine parent = game_menu
          id = backend_sound_options
          text = "Sound Options"
          link = sfx_menu_container

#00000    DestroyElement id = backend_cheat_menu

#00000    IF InNetGame
#00000    ELSE
#00000      IF GetGlobalFlag flag = CHEAT_UNLOCKED_1

#00000        AddLine parent = game_menu
              id = backend_cheat_menu
              text = "Cheats"
              link = cheat_menu

#00000      END IF
#00000    END IF
#00000    AddLine parent = game_menu
          id = backend_end_run
          text = "End Run"
          target = "do_backend_end_run"
          kill_menu
#00000    IF CD
#00000      DestroyElement id = goto_restart_menu

#00000      DestroyElement id = game_menu_debug

#00000    ELSE
#00000      AddLine parent = game_menu
            id = goto_restart_menu
            text = "Skip to Restart"
            link = restart_menu

#00000      AddLine parent = game_menu
            id = game_menu_debug
            text = "debug menu"
            link = debug_main_menu

#00000    END IF
#00000    IF IsCompetition
#00000      AddLine parent = game_menu
            id = end_comp
            text = "End Competition"
            target = "do_end_comp"
            kill_menu
#00000    ELSE
#00000      DestroyElement id = end_comp

#00000    END IF
#00000    SelectElement id = backend_continue

#00000    IF CareerLevelIs LevelNum_Tutorials
#00000      IF GetFlag flag = TUTORIAL_RUNNING

#00000        AddLine parent = game_menu
              id = end_tutorial_item
              text = "Tutorials Menu"
              target = "EndCurrentTutorial"
              kill_menu
#00000      END IF
#00000      DestroyElement id = goto_trickset_menu

#00000      DestroyElement id = backend_cheat_menu

#00000      DestroyElement id = backend_retry

#00000      DestroyElement id = goto_restart_menu

#00000      DestroyElement id = game_menu_debug

#00000      DestroyElement id = backend_end_run

#00000    ELSE
#00000    END IF
#00000  END FUNCTION

#00000  FUNCTION EndofRun_helper
#00000    helper_hide
#00000    helper_set_positions x1 = 190
          x2 = 330

#00000    SetMenuElementText id = helper_menu_1
          "бе Select"
#00000    SetMenuElementText id = helper_menu_2
          "м Accept"
#00000  END FUNCTION

#00000  FUNCTION Refresh_EndofRunMenu
#00000    EndofRun_helper
#00000    IF InNetGame
#00000    ELSE
#00000      PauseMusicAndStreams
#00000    END IF
#00000    IF IsCareerMode
#00000      IF GetGlobalFlag flag = JUST_UNLOCKED_LEVEL

#00000        SelectElement id = backend_change_level

#00000      ELSE
#00000        SelectElement id = backend_retry2

#00000      END IF
#00000    ELSE
#00000      SelectElement id = backend_retry2

#00000    END IF
#00000    IF IsCompetition
#00000      AddLine parent = end_run_menu
            id = backend_retry2
            text = "Restart Comp"
            target = "do_backend_retry"
            kill_menu
#00000    ELSE
#00000      AddLine parent = end_run_menu
            id = backend_retry2
            text = "Retry"
            target = "do_backend_retry"
            kill_menu
#00000    END IF
#00000    IF InSplitScreenGame
#00000      AddLine parent = end_run_menu
            id = gameoptions_item
            text = "Game options"
            link = splitscreen_setup_menu

#00000    ELSE
#00000      DestroyElement id = gameoptions_item

#00000    END IF
#00000    IF IsCareerMode
#00000      IF IsCompetition
#00000        DestroyElement id = backend_watchreplay

#00000      ELSE
#00000        AddLine parent = end_run_menu
              id = backend_watchreplay
              text = "Watch Replay"
              target = "WatchEndOfRunReplay"
              kill_menu
#00000      END IF
#00000    ELSE
#00000      IF GameModeEquals is_singlesession
#00000        IF IsCustomPark
#00000          DestroyElement id = backend_watchreplay

#00000        ELSE
#00000          AddLine parent = end_run_menu
                id = backend_watchreplay
                text = "Watch Replay"
                target = "WatchEndOfRunReplay"
                kill_menu
#00000        END IF
#00000      ELSE
#00000        DestroyElement id = backend_watchreplay

#00000      END IF
#00000    END IF
#00000    IF IsTrue ShouldDisableReplays
#00000      DestroyElement id = backend_watchreplay

#00000    END IF
#00000    DestroyElement id = backend_watchreplay

#00000    IF IsCareerMode
#00000      IF IsCompetition
#00000        DestroyElement id = view_goals_movies_element

#00000      ELSE
#00000        AddLine parent = end_run_menu
              id = view_goals_movies_element
              text = "View Goal Movies"
              target = "View_Goal_movies"
              kill_menu
#00000      END IF
#00000    ELSE
#00000      DestroyElement id = view_goals_movies_element

#00000    END IF
#00000    IF InSplitScreenGame
#00000      DestroyElement id = goto_trickset_menu

#00000    ELSE
#00000    END IF
#00000    IF IsCareerMode
#00000      AddLine parent = end_run_menu
            id = backend_change_level
            text = "Change Level"
            link = career_change_level_menu

#00000    ELSE
#00000      AddLine parent = end_run_menu
            id = backend_change_level
            text = "Change Level"
            link = change_level_menu

#00000    END IF
#00000    IF IsCustomPark
#00000      DestroyElement id = backend_change_level

#00000    END IF
#00000    IF InSplitScreenGame
#00000      DestroyElement id = edit_stats

#00000      DestroyElement id = goto_trickset_menu

#00000      DestroyElement id = save_game

#00000    ELSE
#00000      AddLine parent = end_run_menu
            id = edit_stats
            text = "Edit stats"
            link = stats_menu

#00000      AddLine parent = end_run_menu
            id = goto_trickset_menu
            text = "Edit Tricks"
            link = trick_menu_container

#00000      AddLine parent = end_run_menu
            id = save_game
            text = "Save game"
            target = "InGameSave"

#00000    END IF
#00000    DestroyElement id = endrun_cheat_menu

#00000    IF InNetGame
#00000    ELSE
#00000      IF GetGlobalFlag flag = CHEAT_UNLOCKED_1

#00000        AddLine parent = end_run_menu
              id = endrun_cheat_menu
              text = "Cheats"
              link = cheat_menu

#00000      END IF
#00000    END IF
#00000    AddLine parent = end_run_menu
          id = main_menu
          text = "Quit"
          link = quitgame_yesno_menu

#00000    IF CD
#00000      DestroyElement id = backend_debug_menu

#00000      DestroyElement id = backend_change_test_level

#00000    ELSE
#00000      AddLine parent = end_run_menu
            id = backend_debug_menu
            text = "Debug Menu"
            link = debug_main_menu

#00000      AddLine parent = end_run_menu
            id = backend_change_test_level
            text = "Change Test Level"
            link = test_level_menu

#00000    END IF
#00000  END FUNCTION

#00000  FUNCTION goto_skateshop
#00000    Change AutoLinkToCareerScreen = 1

#00000    chosen_leave_server
#00000  END FUNCTION

#00000  FUNCTION InGameEndMemCardSaveLoad
#00000    SwitchToMenu menu = end_run_menu

#00000  END FUNCTION

#00000  FUNCTION _InGameEndMemCardSaveLoad
#00000    SpawnScript InGameEndMemCardSaveLoad params = NULL

#00000  END FUNCTION

#00000  FUNCTION InGameSave
#00000    helper_hide
#00000    SpawnScript SaveOptionsAndPros params = STRUCT{
            EndScr = InGameEndMemCardSaveLoad
            }

#00000  END FUNCTION

#00000  FUNCTION Continue_to_endofrun
#00000    SwitchToMenu menu = end_run_menu

#00000  END FUNCTION

#00000  FUNCTION front_end_set_inactive
#00000    FrontEndSetInactive
#00000    IF CareerLevelIs LevelNum_Tutorials
#00000      PauseStream 0
#00000    ELSE
#00000      UnPauseMusicAndStreams
#00000    END IF
#00000  END FUNCTION

#00000  FUNCTION Select_No
#00000    SelectElement id = quit_no

#00000    helper_select_choose_back_centered
#00000  END FUNCTION

#00000  FUNCTION Server_Select_No
#00000    SelectElement id = server_quit_no

#00000    helper_select_choose_back_centered
#00000  END FUNCTION

#00000  FUNCTION Client_Select_No
#00000    SelectElement id = client_quit_no

#00000    helper_select_choose_back_centered
#00000  END FUNCTION

#00000  FUNCTION setup_backend_menu
#00000    setdefaultproperty type = textdrawer
          name = main

#00000    createmenu STRUCT{
            type = menucontainer
            id = contain1
            dynamic_children = ARRAY(

              STRUCT{
                id = sfx_menu_container
                target_script = sfx_menu_create
                }
              STRUCT{
                id = trick_menu_container
                target_script = trick_menu_create
                }

            )
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = game_menu
            game_menu_properties blue_top eventhandlers = ARRAY(

              STRUCT{
                type = showeventhandler
                target = "RefreshGameMenu"
                }
              STRUCT{
                type = backeventhandler
                target = "front_end_set_inactive"
                }

            )
            children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "paused"
                static dont_gray drawer = title
                }

            )
            parent = contain1
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = restart_menu
            x = 100.0
            y = 70.0
            w = 410.0
            h = 224.0
            parent = contain1
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = savegame_yesno_menu
            x = 170.0
            y = 150.0
            w = 300.0
            h = 336.0
            just_center_x just_center_y blue_top eventhandler = STRUCT{
              type = showeventhandler
              target = "EndofRun_helper"
              }
            parent = contain1
            children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "Save Game"
                static dont_gray drawer = title
                }
              STRUCT{
                type = textmenuelement
                id = savegame_yes
                text = "Yes"
                target = "InGameSave"
                }
              STRUCT{
                type = textmenuelement
                id = savegame_no
                text = "No"
                target = "Continue_to_endofrun"
                kill_menu }

            )
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = quitgame_yesno_menu
            x = 170.0
            y = 150.0
            w = 300.0
            h = 336.0
            just_center_x just_center_y blue_top eventhandler = STRUCT{
              type = showeventhandler
              target = "Select_no"
              }
            parent = contain1
            children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "Quit?"
                static dont_gray drawer = title
                }
              STRUCT{
                type = textmenuelement
                id = quit_yes
                text = "Yes"
                target = "chosen_leave_server"
                kill_menu }
              STRUCT{
                type = textmenuelement
                id = quit_no
                text = "No"
                link = end_run_menu
                }

            )
            }

#00000    IF ENGLISH
#00000      CreateAndAttachMenu STRUCT{
              type = verticalmenu
              id = end_run_menu
              game_menu_properties blue_top eventhandler = STRUCT{
                type = showeventhandler
                target = "Refresh_EndofRunMenu"
                }
              children = ARRAY(

                STRUCT{
                  type = textmenuelement
                  auto_id text = "end of run"
                  static dont_gray drawer = title
                  }

              )
              parent = contain1
              }

#00000    ELSE
#00000      CreateAndAttachMenu STRUCT{
              type = verticalmenu
              id = end_run_menu
              game_menu_properties w = 340
              x = 150
              blue_top eventhandler = STRUCT{
                type = showeventhandler
                target = "Refresh_EndofRunMenu"
                }
              children = ARRAY(

                STRUCT{
                  type = textmenuelement
                  auto_id text = "end of run"
                  static dont_gray drawer = title
                  }

              )
              parent = contain1
              }

#00000    END IF
#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = victorycondition_menu
            x = 120.0
            y = 70.0
            w = 420.0
            h = 336.0
            just_center_x just_center_y blue_top children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "set victory"
                static dont_gray drawer = title
                }
              STRUCT{
                type = textmenuelement
                id = victorycondition_highestscore
                text = "Highest Score Wins"
                target = "do_victorycondition_highestscore"
                adds_task }
              STRUCT{
                type = textmenuelement
                id = victorycondition_target10000
                text = "First Skater to 10000 Wins"
                target = "do_victorycondition_target10000"
                adds_task }
              STRUCT{
                type = textmenuelement
                id = victorycondition_target50000
                text = "First Skater to 50000 Wins"
                target = "do_victorycondition_target50000"
                adds_task }

            )
            parent = contain1
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = gameoptions_menu
            x = 120.0
            y = 70.0
            w = 400.0
            h = 336.0
            just_center_x just_center_y blue_top children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "game options"
                static dont_gray drawer = title
                }
              STRUCT{
                type = textmenuelement
                id = gameoptions_victorycondition
                text = "Set Victory Conditions"
                link = victorycondition_menu
                }

            )
            parent = contain1
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = trickset_menu
            game_menu_properties blue_top children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "trickset"
                static dont_gray drawer = title
                }
              STRUCT{
                type = textmenuelement
                id = airtricks1
                text = "Left+Circle"
                target = "change_airtricks1"
                kill_menu }
              STRUCT{
                type = textmenuelement
                id = airtricks2
                text = "Right+Circle"
                target = "change_airtricks2"
                kill_menu }

            )
            parent = contain1
            }

#00000    create_splitscreen_menu
#00000    create_and_attach_generic_array_menu STRUCT{
            menu_id = network_time_limit_menu
            array_name = time_limit_options
            field = time_limit
            title = "Time Limit"
            prefs = network
            x = 170.0
            y = 90.0
            w = 300.0
            h = 400.0
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = server_pause_menu
            x = 120.0
            y = 80.0
            w = 400.0
            h = 336.0
            blue_top eventhandler = STRUCT{
              type = backeventhandler
              target = "front_end_set_inactive"
              }
            children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "Server Pause"
                static dont_gray drawer = title
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Settings (TEMP)"
                kill_menu eventhandler = STRUCT{
                  type = ChooseEventHandler
                  target = "invokeUIScreen"
                  params = STRUCT{
                    screen = ss_main_window
                    }
                  }
                }
              STRUCT{
                type = textmenuelement
                id = server_pause_menu_continue_item
                text = "Continue"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  }
                }
              STRUCT{
                type = textmenuelement
                id = server_pause_menu_start_game_item
                text = "Start Game"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  }
                }
              STRUCT{
                type = textmenuelement
                id = server_choose_team_item
                text = "Choose Team"
                eventhandlers = ARRAY(

                  STRUCT{
                    type = ChooseEventHandler
                    link = server_choose_team_menu
                    }

                )
                }
              STRUCT{
                type = textmenuelement
                id = server_game_options_item
                text = "Game Options"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = net_game_options_menu
                  }
                }
              STRUCT{
                type = textmenuelement
                id = server_change_level_item
                text = "Change Level"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = net_level_menu
                  }
                }
              STRUCT{
                type = textmenuelement
                id = server_pause_menu_ban_player_item
                text = "Ban Player..."
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = ban_player_menu
                  }
                }
              STRUCT{
                type = textmenuelement
                id = server_pause_menu_toggle_names_item
                text = "Toggle Player Names"
                }
              STRUCT{
                type = textmenuelement
                id = server_pause_menu_toggle_scores_item
                text = "Toggle Scores"
                }
              STRUCT{
                type = textmenuelement
                id = server_pause_menu_chat_item
                text = "Enter Chat Message"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = chat_message_control
                  }
                }
              STRUCT{
                type = textmenuelement
                id = server_pause_sound_options
                text = "Sound Options"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = sfx_menu_container
                  }
                }
              STRUCT{
                type = textmenuelement
                id = server_pause_menu_quit_item
                text = "Quit"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = server_quitgame_yesno_menu
                  }
                }

            )
            parent = contain1
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = server_choose_team_menu
            x = 170.0
            y = 80.0
            w = 300.0
            h = 400.0
            just_center_x just_center_y blue_top children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "Choose Team"
                static dont_gray drawer = title
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Automatic"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = server_pause_menu
                  target = "do_choose_team"
                  params = STRUCT{
                    automatic }
                  }
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Blue"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = server_pause_menu
                  target = "do_choose_team"
                  params = STRUCT{
                    blue }
                  }
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Red"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = server_pause_menu
                  target = "do_choose_team"
                  params = STRUCT{
                    red }
                  }
                }

            )
            parent = contain1
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = client_choose_team_menu
            x = 170.0
            y = 80.0
            w = 300.0
            h = 400.0
            just_center_x just_center_y blue_top children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "Choose Team"
                static dont_gray drawer = title
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Automatic"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = server_pause_menu
                  target = "do_choose_team"
                  params = STRUCT{
                    automatic }
                  }
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Blue"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = server_pause_menu
                  target = "do_choose_team"
                  params = STRUCT{
                    blue }
                  }
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Red"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = server_pause_menu
                  target = "do_choose_team"
                  params = STRUCT{
                    red }
                  }
                }

            )
            parent = contain1
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = net_level_menu
            x = 170.0
            y = 80.0
            w = 300.0
            h = 400.0
            just_center_x just_center_y blue_top eventhandlers = ARRAY(

              STRUCT{
                type = showeventhandler
                target = "populate_level_menu"
                params = STRUCT{
                  choose_script = "change_level"
                  parent_menu = net_level_menu
                  }
                }

            )
            children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "Levels"
                static dont_gray drawer = title
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Play Custom Park"
                target = "_NetMenuParkEditorLoad"
                }

            )
            parent = contain1
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = client_pause_menu
            x = 120.0
            y = 80.0
            w = 400.0
            h = 336.0
            blue_top eventhandler = STRUCT{
              type = backeventhandler
              target = "front_end_set_inactive"
              }
            children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "Client Pause"
                static dont_gray drawer = title
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Settings (TEMP)"
                eventhandler = STRUCT{
                  kill_menu type = ChooseEventHandler
                  target = "invokeUIScreen"
                  params = STRUCT{
                    screen = ss_main_window
                    }
                  }
                }
              STRUCT{
                type = textmenuelement
                id = client_pause_menu_continue_item
                text = "Continue"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  }
                }
              STRUCT{
                type = textmenuelement
                id = client_choose_team_item
                text = "Choose Team"
                eventhandlers = ARRAY(

                  STRUCT{
                    type = ChooseEventHandler
                    link = client_choose_team_menu
                    }

                )
                }
              STRUCT{
                type = textmenuelement
                id = client_pause_menu_toggle_names_item
                text = "Toggle Player Names"
                }
              STRUCT{
                type = textmenuelement
                id = client_pause_menu_toggle_scores_item
                text = "Toggle Scores"
                }
              STRUCT{
                type = textmenuelement
                id = client_pause_menu_chat_item
                text = "Enter Chat Message"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = chat_message_control
                  }
                }
              STRUCT{
                type = textmenuelement
                id = client_pause_sound_options
                text = "Sound Options"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = sfx_menu_container
                  }
                }
              STRUCT{
                type = textmenuelement
                id = client_pause_menu_quit_item
                text = "Quit"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = client_quitgame_yesno_menu
                  }
                }

            )
            parent = contain1
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = server_quitgame_yesno_menu
            x = 170.0
            y = 150.0
            w = 300.0
            h = 336.0
            just_center_x just_center_y blue_top eventhandler = STRUCT{
              type = showeventhandler
              target = "Server_Select_No"
              }
            parent = contain1
            children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "Quit?"
                static dont_gray drawer = title
                }
              STRUCT{
                type = textmenuelement
                id = server_quit_yes
                text = "Yes"
                target = "chosen_leave_server"
                }
              STRUCT{
                type = textmenuelement
                id = server_quit_no
                text = "No"
                link = server_pause_menu
                }

            )
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = client_quitgame_yesno_menu
            x = 170.0
            y = 150.0
            w = 300.0
            h = 336.0
            just_center_x just_center_y blue_top eventhandler = STRUCT{
              type = showeventhandler
              target = "Client_Select_No"
              }
            parent = contain1
            children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "Quit?"
                static dont_gray drawer = title
                }
              STRUCT{
                type = textmenuelement
                id = client_quit_yes
                text = "Yes"
                target = "chosen_leave_server"
                }
              STRUCT{
                type = textmenuelement
                id = client_quit_no
                text = "No"
                link = client_pause_menu
                }

            )
            }

#00000    CreateAndAttachMenu STRUCT{
            type = keyboardcontrol
            id = chat_message_control
            x = 160.0
            y = 56.0
            w = 320.0
            h = 336.0
            just_center_x just_center_y num_columns = 13
            standard_charset allow_uppercase allow_lowercase min_chars = 0
            max_chars = 30
            title_string = "Enter chat message:"
            default_string = ""
            eventhandlers = ARRAY(

              STRUCT{
                type = showeventhandler
                target = "clear_keyboard_string"
                params = STRUCT{
                  control_id = chat_message_control
                  }
                }
              STRUCT{
                type = contentschangedeventhandler
                target = "send_chat_message"
                }
              STRUCT{
                type = showeventhandler
                target = "helper_on_keyboard_control"
                }

            )
            kill_on_close parent = contain1
            }

#00000    CreateAndAttachMenu STRUCT{
            type = keyboardcontrol
            id = kb_chat_message_control
            x = 160.0
            y = 56.0
            w = 320.0
            h = 336.0
            just_center_x just_center_y num_columns = 13
            no_gui allow_uppercase allow_lowercase allow_slashes min_chars = 0
            max_chars = 30
            title_string = "Enter chat message:"
            default_string = ""
            eventhandlers = ARRAY(

              STRUCT{
                type = showeventhandler
                target = "clear_keyboard_string"
                params = STRUCT{
                  control_id = kb_chat_message_control
                  }
                }
              STRUCT{
                type = contentschangedeventhandler
                target = "send_chat_message"
                }
              STRUCT{
                type = showeventhandler
                target = "helper_on_keyboard_control_no_gui"
                }

            )
            kill_on_close parent = contain1
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = net_game_options_menu
            x = 160.0
            y = 56.0
            w = 320.0
            h = 336.0
            just_center_x just_center_y blue_top children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "Game Options"
                static dont_gray drawer = title
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Server Name"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = opts_net_server_name_control
                  }
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Current Server Name"
                static dont_gray drawer = keyboard_property
                eventhandler = STRUCT{
                  type = showeventhandler
                  target = "set_ui_from_preferences"
                  params = STRUCT{
                    prefs = network
                    field = "server_name"
                    }
                  }
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Game Type"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = opts_net_game_type_menu
                  }
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Current Game"
                static dont_gray drawer = keyboard_property
                eventhandler = STRUCT{
                  type = showeventhandler
                  target = "set_ui_from_preferences"
                  params = STRUCT{
                    prefs = network
                    field = "game_type"
                    }
                  }
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Time Limit"
                link = network_time_limit_menu
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Current Time Limit"
                static dont_gray drawer = keyboard_property
                eventhandler = STRUCT{
                  type = showeventhandler
                  target = "set_ui_from_preferences"
                  params = STRUCT{
                    prefs = network
                    field = "time_limit"
                    }
                  }
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Maximum Players"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = opts_net_num_players_menu
                  }
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Current Players"
                static dont_gray drawer = keyboard_property
                eventhandler = STRUCT{
                  type = showeventhandler
                  target = "set_ui_from_preferences"
                  params = STRUCT{
                    prefs = network
                    field = "num_players"
                    }
                  }
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Password"
                eventhandler = STRUCT{
                  type = ChooseEventHandler
                  link = opts_net_password_control
                  }
                }
              STRUCT{
                type = textmenuelement
                auto_id text = "Current Password"
                static dont_gray drawer = keyboard_property
                eventhandler = STRUCT{
                  type = showeventhandler
                  target = "set_ui_from_preferences"
                  params = STRUCT{
                    prefs = network
                    field = "password"
                    }
                  }
                }

            )
            parent = contain1
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = net_game_options_menu
            x = 160.0
            y = 56.0
            w = 320.0
            h = 336.0
            just_center_x just_center_y id = ban_player_menu
            blue_top children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "Ban Player"
                static dont_gray drawer = title
                }

            )
            parent = contain1
            }

#00000    create_and_attach_generic_array_menu STRUCT{
            menu_id = opts_net_num_players_menu
            array_name = num_players_info
            field = num_players
            title = "Number of Players"
            prefs = network
            validationscript = "validate_player_option"
            x = 140.0
            y = 120.0
            w = 360.0
            h = 400.0
            }

#00000    create_and_attach_generic_array_menu STRUCT{
            menu_id = opts_net_num_obs_menu
            array_name = num_observers_info
            field = num_observers
            title = "Number of Observers"
            prefs = network
            x = 120.0
            y = 120.0
            w = 400.0
            h = 400.0
            }

#00000    create_and_attach_generic_array_menu STRUCT{
            menu_id = opts_net_game_type_menu
            array_name = game_type_info
            field = game_type
            title = "Game Type"
            prefs = network
            x = 170.0
            y = 120.0
            w = 300.0
            h = 400.0
            }

#00000    CreateAndAttachMenu STRUCT{
            type = keyboardcontrol
            id = opts_net_password_control
            x = 160.0
            y = 56.0
            w = 320.0
            h = 336.0
            just_center_x just_center_y num_columns = 13
            standard_charset min_chars = 0
            max_chars = 8
            title_string = "Enter password:"
            eventhandlers = ARRAY(

              STRUCT{
                type = showeventhandler
                target = "set_ui_from_preferences"
                params = STRUCT{
                  prefs = network
                  field = "password"
                  }
                }
              STRUCT{
                type = contentschangedeventhandler
                target = "set_preferences_from_ui"
                params = STRUCT{
                  prefs = network
                  field = "password"
                  }
                }
              STRUCT{
                type = showeventhandler
                target = "helper_on_keyboard_control"
                }

            )
            parent = contain1
            }

#00000    CreateAndAttachMenu STRUCT{
            type = keyboardcontrol
            id = opts_net_server_name_control
            x = 160.0
            y = 56.0
            w = 320.0
            h = 336.0
            just_center_x just_center_y num_columns = 13
            standard_charset min_chars = 3
            max_chars = 15
            title_string = "Enter server name:"
            eventhandlers = ARRAY(

              STRUCT{
                type = showeventhandler
                target = "set_ui_from_preferences"
                params = STRUCT{
                  prefs = network
                  field = "server_name"
                  }
                }
              STRUCT{
                type = contentschangedeventhandler
                target = "set_preferences_from_ui"
                params = STRUCT{
                  prefs = network
                  field = "server_name"
                  }
                }
              STRUCT{
                type = showeventhandler
                target = "helper_on_keyboard_control"
                }

            )
            parent = contain1
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = change_level_menu
            x = 160.0
            y = 70.0
            w = 300.0
            h = 400.0
            just_center_x just_center_y blue_top eventhandler = STRUCT{
              type = showeventhandler
              target = "populate_level_menu"
              params = STRUCT{
                choose_script = "change_level"
                parent_menu = change_level_menu
                }
              }
            children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "Levels"
                static dont_gray drawer = title
                }

            )
            parent = contain1
            }

#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = career_change_level_menu
            x = 140.0
            y = 90.0
            w = 360.0
            h = 400.0
            just_center_x just_center_y blue_top eventhandler = STRUCT{
              type = showeventhandler
              target = "populate_level_menu"
              params = STRUCT{
                choose_script = "change_level"
                parent_menu = career_level_names
                }
              }
            children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "Levels"
                static dont_gray drawer = title
                }
              STRUCT{
                type = menucontainer
                id = career_levels_multi_container
                show_all_children }

            )
            parent = contain1
            }

#00000    DestroyElement id = career_level_names

#00000    DestroyElement id = career_level_goals

#00000    createmenu STRUCT{
            type = verticalmenu
            id = career_level_names
            x = 0.0
            y = 0.0
            w = 280.0
            h = 336.0
            just_center_x just_center_y not_rounded children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "Name"
                static drawer = main_smaller
                }

            )
            }

#00000    createmenu STRUCT{
            type = verticalmenu
            id = career_level_goals
            x = 280.0
            y = 0.0
            w = 80.0
            h = 336.0
            just_center_x just_center_y not_rounded static eventhandler = STRUCT{
              type = showeventhandler
              target = "populate_goals_menu"
              }
            children = ARRAY(

              STRUCT{
                type = textmenuelement
                auto_id text = "Goals"
                static drawer = main_smaller
                }

            )
            }

#00000    attachchild parent = career_levels_multi_container
          child = career_level_names

#00000    attachchild parent = career_levels_multi_container
          child = career_level_goals

#00000    printf "Going through master level list... regular change level"
#00000    attach_new_stats_menu STRUCT{
            menu_id = stats_menu
            container_id = contain1
            points_available_id = ingame_cas_points_available
            left_container_id = stats_left_container
            right_container_id = stats_right_container
            }

#00000    AttachEventHandler STRUCT{
            type = showeventhandler
            object = stats_menu
            target = "helper_on_stat_menu"
            }

#00000    helper_menu_create
#00000    debug_menu_create
#00000    level_menu_create
#00000    stats_menu_create
#00000    comp_menu_create
#00000    horse_menu_create
#00000    replay_menu_create
#00000    cheat_menu_create
#00000    replay_from_memcard_menu_create
#00000    memcard_files_menu_create
#00000  END FUNCTION

#00000  FUNCTION populate_goals_menu

#00000    DestroyElement id = level1

#00000    DestroyElement id = level2

#00000    DestroyElement id = level3

#00000    DestroyElement id = level4

#00000    DestroyElement id = level5

#00000    DestroyElement id = level6

#00000    DestroyElement id = level7

#00000    DestroyElement id = level8

#00000    DestroyElement id = level9

#00000    GetGoalsCompleted LevelNum_Foundry
#00000    IF GetGlobalFlag flag = LEVEL_UNLOCKED_FOUNDRY
#00000      AddLine parent = career_level_goals
            id = level1
            text = GLOBAL.GoalsCompleted
#00000    ELSE
#00000      AddLine parent = career_level_goals
            id = level1
            text = GLOBAL.GoalsCompleted
            static
#00000    END IF

#00000    GetGoalsCompleted LevelNum_Canada
#00000    IF GetGlobalFlag flag = LEVEL_UNLOCKED_CANADA

#00000      AddLine parent = career_level_goals
            id = level2
            text = GLOBAL.GoalsCompleted

#00000    ELSE
#00000      AddLine parent = career_level_goals
            id = level2
            text = GLOBAL.GoalsCompleted
            static
#00000    END IF
#00000    GetGoalsCompleted LevelNum_Rio
#00000    IF GetGlobalFlag flag = LEVEL_UNLOCKED_RIO

#00000      AddLine parent = career_level_goals
            id = level3
            text = GLOBAL.BestMedal

#00000    ELSE
#00000      printf "--------------------- Printing best medal for Rio"
#00000      AddLine parent = career_level_goals
            id = level3
            text = GLOBAL.BestMedal
            static
#00000    END IF
#00000    GetGoalsCompleted LevelNum_Suburbia
#00000    IF GetGlobalFlag flag = LEVEL_UNLOCKED_SUBURBIA

#00000      AddLine parent = career_level_goals
            id = level4
            text = GLOBAL.GoalsCompleted

#00000    ELSE
#00000      AddLine parent = career_level_goals
            id = level4
            text = GLOBAL.GoalsCompleted
            static
#00000    END IF
#00000    GetGoalsCompleted LevelNum_Airport
#00000    IF GetGlobalFlag flag = LEVEL_UNLOCKED_AIRPORT

#00000      AddLine parent = career_level_goals
            id = level5
            text = GLOBAL.GoalsCompleted

#00000    ELSE
#00000      AddLine parent = career_level_goals
            id = level5
            text = GLOBAL.GoalsCompleted
            static
#00000    END IF
#00000    GetGoalsCompleted LevelNum_SkaterIsland
#00000    IF GetGlobalFlag flag = LEVEL_UNLOCKED_SKATERISLAND

#00000      AddLine parent = career_level_goals
            id = level6
            text = GLOBAL.BestMedal

#00000    ELSE
#00000      AddLine parent = career_level_goals
            id = level6
            text = GLOBAL.BestMedal
            static
#00000    END IF
#00000    GetGoalsCompleted LevelNum_LA
#00000    IF GetGlobalFlag flag = LEVEL_UNLOCKED_LOSANGELES

#00000      AddLine parent = career_level_goals
            id = level7
            text = GLOBAL.GoalsCompleted

#00000    ELSE
#00000      AddLine parent = career_level_goals
            id = level7
            text = GLOBAL.GoalsCompleted
            static
#00000    END IF
#00000    GetGoalsCompleted LevelNum_Tokyo
#00000    IF GetGlobalFlag flag = LEVEL_UNLOCKED_TOKYO

#00000      AddLine parent = career_level_goals
            id = level8
            text = GLOBAL.BestMedal

#00000    ELSE
#00000      AddLine parent = career_level_goals
            id = level8
            text = GLOBAL.BestMedal
            static
#00000    END IF
#00000    IF GetGlobalFlag flag = SPECIAL_HAS_SEEN_SHIP

#00000      GetGoalsCompleted LevelNum_Ship
#00000      IF GetGlobalFlag flag = LEVEL_UNLOCKED_SHIP

#00000        AddLine parent = career_level_goals
              id = level9
              text = GLOBAL.GoalsCompleted

#00000      ELSE
#00000        AddLine parent = career_level_goals
              id = level9
              text = GLOBAL.GoalsCompleted
              static
#00000      END IF
#00000    ELSE
#00000      DestroyElement id = level9

#00000    END IF
#00000  END FUNCTION

#00000  FUNCTION populate_level_menu
#00000    helper_hide
#00000    helper_select_choose_back x1 = 167
          x2 = 282
          x3 = 392

#00000    IF IsCareerMode
#00000      populate_goals_menu
#00000      AddLine parent = career_change_level_menu
                id = next_level_at
                text = "{{rando_game_victory_text}}"
                static drawer = main_smaller
                lock_layout y = 220
#00000    ELSE
#00000      DestroyElement id = next_level_at

#00000    END IF
#00000    VerifyParam param = parent_menu
          func = populate_level_menu
          NULL
#00000    VerifyParam param = choose_script
          func = populate_level_menu
          NULL
#00000    ForEachIn master_level_list do = add_level_menu_item
          params = STRUCT{
            mask = regular_level
            target_script = GLOBAL.choose_script
            parent_menu = GLOBAL.parent_menu
            }

#00000  END FUNCTION

#00000  FUNCTION toggle_player_names
#00000    TogglePlayerNames
#00000  END FUNCTION

#00000  FUNCTION toggle_scores
#00000    ToggleScores
#00000  END FUNCTION

#00000  FUNCTION enter_observer_mode
#00000    EnterObserverMode
#00000  END FUNCTION

#00000  FUNCTION enter_chat_mode
#00000  END FUNCTION

#00000  FUNCTION back_to_main
#00000    printf "running back_to_main"
#00000    LaunchMenuScreen screen = main_menu

#00000  END FUNCTION

#00000  FUNCTION change_airtricks1
#00000    Change Air_CircleL = Trick_Stiffy

#00000  END FUNCTION

#00000  FUNCTION change_airtricks2
#00000    Change Air_CircleR = Trick_Judo

#00000  END FUNCTION

#00000  FUNCTION change_airtricks3
#00000    Change Airtricks = Airtricks3

#00000    Change JumpTricks = Jumptricks3

#00000  END FUNCTION

#00000  FUNCTION enter_kb_chat
#00000    SwitchToMenu menu = kb_chat_message_control
          DoNotPause
#00000  END FUNCTION

#00000  FUNCTION attach_new_stats_menu stats_left_width = 150
          stats_right_width = 160

#00000    VerifyParam param = menu_id
          func = attach_new_stats_menu
          NULL
#00000    VerifyParam param = container_id
          func = attach_new_stats_menu
          NULL
#00000    VerifyParam param = left_container_id
          func = attach_new_stats_menu
          NULL
#00000    VerifyParam param = right_container_id
          func = attach_new_stats_menu
          NULL
#00000    CreateAndAttachMenu STRUCT{
            type = verticalmenu
            id = GLOBAL.menu_id
            parent = GLOBAL.container_id
            game_menu_properties blue_top eventhandlers = ARRAY(

              STRUCT{
                type = showeventhandler
                target = "update_stats_elements"
                }

            )
            }

#00000    IF GotParam is_pro_menu
#00000    ELSE
#00000      CreateAndAttachMenu STRUCT{
              type = textmenuelement
              auto_id parent = GLOBAL.menu_id
              text = "edit stats"
              static dont_gray drawer = title
              }

#00000    END IF
#00000    CreateAndAttachMenu STRUCT{
            type = menucontainer
            auto_id show_all_children parent = GLOBAL.menu_id
            eventhandler = STRUCT{
              type = leftrightcontroller
              left = GLOBAL.left_container_id
              right = GLOBAL.right_container_id
              }
            children = ARRAY(

              STRUCT{
                type = verticalmenu
                cas_right_menu_properties y = 0.0
                x = GLOBAL.stats_left_width
                w = GLOBAL.stats_right_width
                id = GLOBAL.right_container_id
                }
              STRUCT{
                type = verticalmenu
                cas_left_menu_properties y = 0.0
                w = GLOBAL.stats_left_width
                id = GLOBAL.left_container_id
                }

            )
            }

#00000    IF GotParam is_pro_menu
#00000    ELSE
#00000      VerifyParam param = points_available_id
            func = attach_new_stats_menu
            NULL
#00000      CreateAndAttachMenu STRUCT{
              type = textmenuelement
              id = GLOBAL.points_available_id
              parent = GLOBAL.menu_id
              text = "current points"
              static dont_gray drawer = points_available_property
              lock_layout y = 222.0
              }

#00000    END IF
#00000    IF GotParam is_pro_menu
#00000      ForEachIn cas_stats_display_children do = attach_new_right_stats_menu_item
            params = STRUCT{
              container_id = GLOBAL.right_container_id
              is_pro_menu stats_right_width = GLOBAL.stats_right_width
              }

#00000    ELSE
#00000      ForEachIn cas_stats_display_children do = attach_new_right_stats_menu_item
            params = STRUCT{
              container_id = GLOBAL.right_container_id
              stats_right_width = GLOBAL.stats_right_width
              }

#00000    END IF
#00000    IF GotParam is_pro_menu
#00000      ForEachIn cas_stats_children do = attach_new_left_stats_menu_item
            params = STRUCT{
              container_id = GLOBAL.left_container_id
              is_pro_menu }

#00000    ELSE
#00000      ForEachIn cas_stats_children do = attach_new_left_stats_menu_item
            params = STRUCT{
              container_id = GLOBAL.left_container_id
              }

#00000    END IF
#00000  END FUNCTION

#00000  FUNCTION update_stats_elements
#00000    printf "Update Stats Elements"
#00000    UpdateStatsElements
#00000  END FUNCTION

#00000  FUNCTION update_stats_ui
#00000    UpdateStatsUI NULL
#00000  END FUNCTION

#00000  stats_left_menu_properties = STRUCT{
          x = 0.0
          y = 0.0
          w = 150.0
          h = 400.0
          just_center_x just_center_y not_rounded }

#00000  stats_right_menu_properties = STRUCT{
          x = 150.0
          y = 0.0
          w = 200.0
          h = 400.0
          just_center_x just_center_y not_rounded }

#00000  FUNCTION attach_new_left_stats_menu_item
#00000    IF GotParam is_pro_menu
#00000      CreateAndAttachMenu STRUCT{
              NULL parent = GLOBAL.container_id
              y = 0.0
              w = 140.0
              }

#00000    ELSE
#00000      CreateAndAttachMenu STRUCT{
              NULL parent = GLOBAL.container_id
              y = 0.0
              }

#00000    END IF
#00000  END FUNCTION

#00000  FUNCTION attach_new_right_stats_menu_item
#00000    IF GotParam is_pro_menu
#00000      VerifyParam param = pro_id
            func = attach_new_right_stats_menu_item
            NULL
#00000      VerifyParam param = stats_right_width
            func = attach_new_right_stats_menu_item
            NULL
#00000      CreateAndAttachMenu STRUCT{
              NULL id = GLOBAL.pro_id
              parent = GLOBAL.container_id
              y = 0.0
              w = GLOBAL.stats_right_width
              static dont_gray r = 100
              g = 65
              b = 0
              a = 115
              }

#00000    ELSE
#00000      CreateAndAttachMenu STRUCT{
              NULL parent = GLOBAL.container_id
              y = 0.0
              w = 170.0
              }

#00000      AttachEventHandler STRUCT{
              type = ChooseEventHandler
              object = GLOBAL.id
              target = "go_back"
              params = STRUCT{
                id = GLOBAL.container_id
                }
              }

#00000    END IF
#00000  END FUNCTION

#00000  FUNCTION send_chat_message
#00000    printf "Sending chat message..."
#00000    SendChatMessage NULL
#00000  END FUNCTION

#00000  FUNCTION clear_keyboard_string
#00000    VerifyParam param = control_id
          func = clear_keyboard_string
          NULL
#00000    IF GotParam string
#00000      LaunchEvent type = setcontents
            target = GLOBAL.control_id
            string = GLOBAL.string

#00000    ELSE
#00000      LaunchEvent type = setcontents
            target = GLOBAL.control_id
            string = ""

#00000    END IF
#00000  END FUNCTION

#00000  FUNCTION PreRunQueuedScripts
#00000    SetSlomo 100.0
#00000  END FUNCTION

#00000  FUNCTION PostRunQueuedScripts
#00000    SetSlomo 1
#00000  END FUNCTION

#00000  FUNCTION choose_team_on_show
#00000    IF InTeamGame
#00000      MakeTextMenuElementStatic GLOBAL.ElementId
            nonstatic = 1

#00000    ELSE
#00000      MakeTextMenuElementStatic GLOBAL.ElementId

#00000    END IF
#00000  END FUNCTION

#00000  FUNCTION do_choose_team
#00000    ChooseTeam NULL
#00000  END FUNCTION
